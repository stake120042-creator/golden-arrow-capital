"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/verify-login/route";
exports.ids = ["app/api/auth/verify-login/route"];
exports.modules = {

/***/ "bcrypt":
/*!*************************!*\
  !*** external "bcrypt" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("bcrypt");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("dns");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fverify-login%2Froute&page=%2Fapi%2Fauth%2Fverify-login%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fverify-login%2Froute.ts&appDir=%2FUsers%2Fgauravk%2FDesktop%2FGolden_Arrow%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgauravk%2FDesktop%2FGolden_Arrow&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fverify-login%2Froute&page=%2Fapi%2Fauth%2Fverify-login%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fverify-login%2Froute.ts&appDir=%2FUsers%2Fgauravk%2FDesktop%2FGolden_Arrow%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgauravk%2FDesktop%2FGolden_Arrow&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_gauravk_Desktop_Golden_Arrow_app_api_auth_verify_login_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/auth/verify-login/route.ts */ \"(rsc)/./app/api/auth/verify-login/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/verify-login/route\",\n        pathname: \"/api/auth/verify-login\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/verify-login/route\"\n    },\n    resolvedPagePath: \"/Users/gauravk/Desktop/Golden_Arrow/app/api/auth/verify-login/route.ts\",\n    nextConfigOutput,\n    userland: _Users_gauravk_Desktop_Golden_Arrow_app_api_auth_verify_login_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/auth/verify-login/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGdmVyaWZ5LWxvZ2luJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhdXRoJTJGdmVyaWZ5LWxvZ2luJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYXV0aCUyRnZlcmlmeS1sb2dpbiUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmdhdXJhdmslMkZEZXNrdG9wJTJGR29sZGVuX0Fycm93JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmdhdXJhdmslMkZEZXNrdG9wJTJGR29sZGVuX0Fycm93JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNzQjtBQUNuRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2dvbGRlbi1hcnJvdy1uZXh0anMvP2FiMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2dhdXJhdmsvRGVza3RvcC9Hb2xkZW5fQXJyb3cvYXBwL2FwaS9hdXRoL3ZlcmlmeS1sb2dpbi9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXV0aC92ZXJpZnktbG9naW4vcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hdXRoL3ZlcmlmeS1sb2dpblwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYXV0aC92ZXJpZnktbG9naW4vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvZ2F1cmF2ay9EZXNrdG9wL0dvbGRlbl9BcnJvdy9hcHAvYXBpL2F1dGgvdmVyaWZ5LWxvZ2luL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hdXRoL3ZlcmlmeS1sb2dpbi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fverify-login%2Froute&page=%2Fapi%2Fauth%2Fverify-login%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fverify-login%2Froute.ts&appDir=%2FUsers%2Fgauravk%2FDesktop%2FGolden_Arrow%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgauravk%2FDesktop%2FGolden_Arrow&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/auth/verify-login/route.ts":
/*!********************************************!*\
  !*** ./app/api/auth/verify-login/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _services_otpService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/otpService */ \"(rsc)/./services/otpService.ts\");\n/* harmony import */ var _services_authService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/authService */ \"(rsc)/./services/authService.ts\");\n\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { email, otp } = body;\n        if (!email || !otp) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: \"Email and OTP are required\"\n            }, {\n                status: 400\n            });\n        }\n        const verify = await _services_otpService__WEBPACK_IMPORTED_MODULE_1__[\"default\"].verifyOTP({\n            email,\n            otp,\n            type: \"login\"\n        });\n        if (verify.success) {\n            // Get user and generate token for successful login\n            const user = await _services_authService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getUserForLogin(email);\n            if (user) {\n                const token = _services_authService__WEBPACK_IMPORTED_MODULE_2__[\"default\"].generateToken(user);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    message: \"Login successful! Welcome back.\",\n                    user,\n                    token\n                });\n            } else {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    message: \"User not found. Please sign up first.\"\n                }, {\n                    status: 400\n                });\n            }\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(verify, {\n                status: 400\n            });\n        }\n    } catch (error) {\n        console.error(\"Error in verify login route:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            message: \"Internal server error during verification\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2F1dGgvdmVyaWZ5LWxvZ2luL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDVDtBQUNFO0FBRTFDLGVBQWVHLEtBQUtDLE9BQW9CO0lBQzdDLElBQUk7UUFDRixNQUFNQyxPQUFPLE1BQU1ELFFBQVFFLElBQUk7UUFDL0IsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEdBQUcsRUFBRSxHQUFHSDtRQUV2QixJQUFJLENBQUNFLFNBQVMsQ0FBQ0MsS0FBSztZQUNsQixPQUFPUixxREFBWUEsQ0FBQ00sSUFBSSxDQUN0QjtnQkFDRUcsU0FBUztnQkFDVEMsU0FBUztZQUNYLEdBQ0E7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLE1BQU1DLFNBQVMsTUFBTVgsNERBQVVBLENBQUNZLFNBQVMsQ0FBQztZQUFFTjtZQUFPQztZQUFLTSxNQUFNO1FBQVE7UUFFdEUsSUFBSUYsT0FBT0gsT0FBTyxFQUFFO1lBQ2xCLG1EQUFtRDtZQUNuRCxNQUFNTSxPQUFPLE1BQU1iLDZEQUFXQSxDQUFDYyxlQUFlLENBQUNUO1lBRS9DLElBQUlRLE1BQU07Z0JBQ1IsTUFBTUUsUUFBUWYsNkRBQVdBLENBQUNnQixhQUFhLENBQUNIO2dCQUV4QyxPQUFPZixxREFBWUEsQ0FBQ00sSUFBSSxDQUFDO29CQUN2QkcsU0FBUztvQkFDVEMsU0FBUztvQkFDVEs7b0JBQ0FFO2dCQUNGO1lBQ0YsT0FBTztnQkFDTCxPQUFPakIscURBQVlBLENBQUNNLElBQUksQ0FDdEI7b0JBQ0VHLFNBQVM7b0JBQ1RDLFNBQVM7Z0JBQ1gsR0FDQTtvQkFBRUMsUUFBUTtnQkFBSTtZQUVsQjtRQUNGLE9BQU87WUFDTCxPQUFPWCxxREFBWUEsQ0FBQ00sSUFBSSxDQUFDTSxRQUFRO2dCQUFFRCxRQUFRO1lBQUk7UUFDakQ7SUFDRixFQUFFLE9BQU9RLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGdDQUFnQ0E7UUFDOUMsT0FBT25CLHFEQUFZQSxDQUFDTSxJQUFJLENBQ3RCO1lBQ0VHLFNBQVM7WUFDVEMsU0FBUztRQUNYLEdBQ0E7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb2xkZW4tYXJyb3ctbmV4dGpzLy4vYXBwL2FwaS9hdXRoL3ZlcmlmeS1sb2dpbi9yb3V0ZS50cz83MmM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgb3RwU2VydmljZSBmcm9tICdAL3NlcnZpY2VzL290cFNlcnZpY2UnO1xuaW1wb3J0IGF1dGhTZXJ2aWNlIGZyb20gJ0Avc2VydmljZXMvYXV0aFNlcnZpY2UnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICBjb25zdCB7IGVtYWlsLCBvdHAgfSA9IGJvZHk7XG4gICAgXG4gICAgaWYgKCFlbWFpbCB8fCAhb3RwKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlOiAnRW1haWwgYW5kIE9UUCBhcmUgcmVxdWlyZWQnXG4gICAgICAgIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB2ZXJpZnkgPSBhd2FpdCBvdHBTZXJ2aWNlLnZlcmlmeU9UUCh7IGVtYWlsLCBvdHAsIHR5cGU6ICdsb2dpbicgfSk7XG4gICAgXG4gICAgaWYgKHZlcmlmeS5zdWNjZXNzKSB7XG4gICAgICAvLyBHZXQgdXNlciBhbmQgZ2VuZXJhdGUgdG9rZW4gZm9yIHN1Y2Nlc3NmdWwgbG9naW5cbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBhdXRoU2VydmljZS5nZXRVc2VyRm9yTG9naW4oZW1haWwpO1xuICAgICAgXG4gICAgICBpZiAodXNlcikge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF1dGhTZXJ2aWNlLmdlbmVyYXRlVG9rZW4odXNlcik7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogJ0xvZ2luIHN1Y2Nlc3NmdWwhIFdlbGNvbWUgYmFjay4nLFxuICAgICAgICAgIHVzZXIsXG4gICAgICAgICAgdG9rZW5cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVXNlciBub3QgZm91bmQuIFBsZWFzZSBzaWduIHVwIGZpcnN0LidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24odmVyaWZ5LCB7IHN0YXR1czogNDAwIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiB2ZXJpZnkgbG9naW4gcm91dGU6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgbWVzc2FnZTogJ0ludGVybmFsIHNlcnZlciBlcnJvciBkdXJpbmcgdmVyaWZpY2F0aW9uJ1xuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJvdHBTZXJ2aWNlIiwiYXV0aFNlcnZpY2UiLCJQT1NUIiwicmVxdWVzdCIsImJvZHkiLCJqc29uIiwiZW1haWwiLCJvdHAiLCJzdWNjZXNzIiwibWVzc2FnZSIsInN0YXR1cyIsInZlcmlmeSIsInZlcmlmeU9UUCIsInR5cGUiLCJ1c2VyIiwiZ2V0VXNlckZvckxvZ2luIiwidG9rZW4iLCJnZW5lcmF0ZVRva2VuIiwiZXJyb3IiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/verify-login/route.ts\n");

/***/ }),

/***/ "(rsc)/./config/database.ts":
/*!****************************!*\
  !*** ./config/database.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Environment variables with fallbacks for build time\nconst supabaseUrl = \"https://ybqoctsdwbwnlkkgcvzi.supabase.co\" || 0;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlicW9jdHNkd2J3bmxra2djdnppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUwMTA3MDAsImV4cCI6MjA3MDU4NjcwMH0.lr9TAmP1wi16BXlaViniH7cAhq4moPVmlM_iiUX039s\" || 0;\n// Runtime validation (not during build)\nif (true) {\n    if (false) {}\n    if (false) {}\n}\n// Create Supabase client\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Legacy interface for backward compatibility with existing code\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    query: async (text, params)=>{\n        // If database is disabled, return mock response\n        if (process.env.DB_DISABLED === \"true\") {\n            return {\n                rows: [],\n                rowCount: 0\n            };\n        }\n        console.warn(\"⚠️ Using legacy query interface. Consider migrating to Supabase client directly.\");\n        // For now, this is a placeholder. You should migrate existing queries to use supabase client\n        throw new Error(\"Legacy query interface not supported with Supabase. Please migrate to use supabase client directly.\");\n    },\n    end: async ()=>{\n        // Supabase handles connection management automatically\n        console.log(\"ℹ️ Supabase handles connection management automatically\");\n    },\n    // Add Supabase client for direct access\n    supabase\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9jb25maWcvZGF0YWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELHNEQUFzRDtBQUN0RCxNQUFNQyxjQUFjQywwQ0FBb0MsSUFBSTtBQUM1RCxNQUFNRyxrQkFBa0JILGtOQUF5QyxJQUFJO0FBRXJFLHdDQUF3QztBQUN4QyxJQUFJLElBQTBELEVBQWU7SUFDM0UsSUFBSSxLQUFxQyxFQUFFLEVBRTFDO0lBRUQsSUFBSSxLQUEwQyxFQUFFLEVBRS9DO0FBQ0g7QUFFQSx5QkFBeUI7QUFDbEIsTUFBTU8sV0FBV1QsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFpQjtBQUVuRSxpRUFBaUU7QUFDakUsaUVBQWU7SUFDYkssT0FBTyxPQUFPQyxNQUFjQztRQUMxQixnREFBZ0Q7UUFDaEQsSUFBSVYsUUFBUUMsR0FBRyxDQUFDVSxXQUFXLEtBQUssUUFBUTtZQUN0QyxPQUFPO2dCQUFFQyxNQUFNLEVBQUU7Z0JBQUVDLFVBQVU7WUFBRTtRQUNqQztRQUVBUixRQUFRQyxJQUFJLENBQUM7UUFFYiw2RkFBNkY7UUFDN0YsTUFBTSxJQUFJUSxNQUFNO0lBQ2xCO0lBRUFDLEtBQUs7UUFDSCx1REFBdUQ7UUFDdkRWLFFBQVFXLEdBQUcsQ0FBQztJQUNkO0lBRUEsd0NBQXdDO0lBQ3hDVDtBQUNGLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dvbGRlbi1hcnJvdy1uZXh0anMvLi9jb25maWcvZGF0YWJhc2UudHM/NGMxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuXG4vLyBFbnZpcm9ubWVudCB2YXJpYWJsZXMgd2l0aCBmYWxsYmFja3MgZm9yIGJ1aWxkIHRpbWVcbmNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIHx8ICdodHRwczovL3BsYWNlaG9sZGVyLnN1cGFiYXNlLmNvJztcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIHx8ICdwbGFjZWhvbGRlci1hbm9uLWtleSc7XG5cbi8vIFJ1bnRpbWUgdmFsaWRhdGlvbiAobm90IGR1cmluZyBidWlsZClcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBpZiAoIXByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCkge1xuICAgIGNvbnNvbGUud2Fybign4pqg77iPIE1pc3NpbmcgTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIC0gdXNpbmcgcGxhY2Vob2xkZXInKTtcbiAgfVxuICBcbiAgaWYgKCFwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSkge1xuICAgIGNvbnNvbGUud2Fybign4pqg77iPIE1pc3NpbmcgTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkgLSB1c2luZyBwbGFjZWhvbGRlcicpO1xuICB9XG59XG5cbi8vIENyZWF0ZSBTdXBhYmFzZSBjbGllbnRcbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KTtcblxuLy8gTGVnYWN5IGludGVyZmFjZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIGV4aXN0aW5nIGNvZGVcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcXVlcnk6IGFzeW5jICh0ZXh0OiBzdHJpbmcsIHBhcmFtcz86IGFueVtdKSA9PiB7XG4gICAgLy8gSWYgZGF0YWJhc2UgaXMgZGlzYWJsZWQsIHJldHVybiBtb2NrIHJlc3BvbnNlXG4gICAgaWYgKHByb2Nlc3MuZW52LkRCX0RJU0FCTEVEID09PSAndHJ1ZScpIHtcbiAgICAgIHJldHVybiB7IHJvd3M6IFtdLCByb3dDb3VudDogMCB9O1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBVc2luZyBsZWdhY3kgcXVlcnkgaW50ZXJmYWNlLiBDb25zaWRlciBtaWdyYXRpbmcgdG8gU3VwYWJhc2UgY2xpZW50IGRpcmVjdGx5LicpO1xuICAgIFxuICAgIC8vIEZvciBub3csIHRoaXMgaXMgYSBwbGFjZWhvbGRlci4gWW91IHNob3VsZCBtaWdyYXRlIGV4aXN0aW5nIHF1ZXJpZXMgdG8gdXNlIHN1cGFiYXNlIGNsaWVudFxuICAgIHRocm93IG5ldyBFcnJvcignTGVnYWN5IHF1ZXJ5IGludGVyZmFjZSBub3Qgc3VwcG9ydGVkIHdpdGggU3VwYWJhc2UuIFBsZWFzZSBtaWdyYXRlIHRvIHVzZSBzdXBhYmFzZSBjbGllbnQgZGlyZWN0bHkuJyk7XG4gIH0sXG4gIFxuICBlbmQ6IGFzeW5jICgpID0+IHtcbiAgICAvLyBTdXBhYmFzZSBoYW5kbGVzIGNvbm5lY3Rpb24gbWFuYWdlbWVudCBhdXRvbWF0aWNhbGx5XG4gICAgY29uc29sZS5sb2coJ+KEue+4jyBTdXBhYmFzZSBoYW5kbGVzIGNvbm5lY3Rpb24gbWFuYWdlbWVudCBhdXRvbWF0aWNhbGx5Jyk7XG4gIH0sXG5cbiAgLy8gQWRkIFN1cGFiYXNlIGNsaWVudCBmb3IgZGlyZWN0IGFjY2Vzc1xuICBzdXBhYmFzZVxufTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZUFub25LZXkiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsImNvbnNvbGUiLCJ3YXJuIiwic3VwYWJhc2UiLCJxdWVyeSIsInRleHQiLCJwYXJhbXMiLCJEQl9ESVNBQkxFRCIsInJvd3MiLCJyb3dDb3VudCIsIkVycm9yIiwiZW5kIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./config/database.ts\n");

/***/ }),

/***/ "(rsc)/./services/authService.ts":
/*!*********************************!*\
  !*** ./services/authService.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bcrypt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcrypt */ \"bcrypt\");\n/* harmony import */ var bcrypt__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bcrypt__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/database */ \"(rsc)/./config/database.ts\");\n\n\n\nclass AuthService {\n    static getInstance() {\n        if (!AuthService.instance) {\n            AuthService.instance = new AuthService();\n        }\n        return AuthService.instance;\n    }\n    // Generate a secure JWT-like token (simplified for this demo)\n    generateToken(user) {\n        const payload = {\n            id: user.id,\n            email: user.email,\n            username: user.username,\n            iat: Date.now(),\n            exp: Date.now() + 24 * 60 * 60 * 1000 // 24 hours\n        };\n        // In production, use proper JWT with secret key\n        return Buffer.from(JSON.stringify(payload)).toString(\"base64\");\n    }\n    // Verify token (simplified for demo)\n    verifyToken(token) {\n        try {\n            const payload = JSON.parse(Buffer.from(token, \"base64\").toString());\n            if (payload.exp < Date.now()) {\n                return {\n                    valid: false\n                };\n            }\n            return {\n                valid: true,\n                user: {\n                    id: payload.id,\n                    email: payload.email,\n                    username: payload.username,\n                    firstName: \"\",\n                    lastName: \"\",\n                    isVerified: true,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                }\n            };\n        } catch (error) {\n            return {\n                valid: false\n            };\n        }\n    }\n    // Create user after successful signup verification\n    async createUserAfterSignup(email, userData) {\n        try {\n            // Generate unique user ID and username\n            const userId = this.generateUserId();\n            const username = this.generateUsername(email);\n            // Hash the password\n            const passwordHash = await bcrypt__WEBPACK_IMPORTED_MODULE_1___default().hash(userData?.password || \"defaultPass123!\", 12);\n            // Insert user into Supabase\n            const { data, error } = await _config_database__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").insert([\n                {\n                    id: userId,\n                    username: username,\n                    email: email.toLowerCase(),\n                    password_hash: passwordHash,\n                    first_name: userData?.firstName || \"\",\n                    last_name: userData?.lastName || \"\",\n                    sponsor: userData?.sponsor || \"\",\n                    is_verified: true,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                }\n            ]).select(\"id, username, email, first_name, last_name, sponsor, is_verified, created_at, updated_at\").single();\n            if (error) {\n                console.error(\"❌ Supabase error:\", error);\n                // Handle duplicate email error\n                if (error.code === \"23505\" && error.message.includes(\"users_email_key\")) {\n                    throw new Error(\"User with this email already exists\");\n                }\n                // Handle duplicate username error\n                if (error.code === \"23505\" && error.message.includes(\"users_username_key\")) {\n                    throw new Error(\"Username already taken\");\n                }\n                throw new Error(`Failed to create user: ${error.message}`);\n            }\n            if (!data) {\n                throw new Error(\"Failed to create user - no data returned\");\n            }\n            // Transform data to match User interface\n            const user = {\n                id: data.id,\n                username: data.username,\n                email: data.email,\n                firstName: data.first_name,\n                lastName: data.last_name,\n                sponsor: data.sponsor,\n                isVerified: data.is_verified,\n                createdAt: new Date(data.created_at),\n                updatedAt: new Date(data.updated_at)\n            };\n            console.log(`👤 New user created in Supabase: ${user.email} (${user.username})`);\n            return user;\n        } catch (error) {\n            console.error(\"❌ Error creating user:\", error);\n            console.error(\"❌ Error details:\", {\n                message: error instanceof Error ? error.message : \"Unknown error\",\n                userData,\n                email\n            });\n            throw error instanceof Error ? error : new Error(`Failed to create user account: Unknown error`);\n        }\n    }\n    // Get user for login verification\n    async getUserForLogin(email) {\n        try {\n            const { data, error } = await _config_database__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").select(\"id, username, email, first_name, last_name, sponsor, is_verified, created_at, updated_at\").or(`email.eq.${email.toLowerCase()},username.eq.${email.toLowerCase()}`).single();\n            if (error || !data) {\n                console.log(`❌ No user found for: ${email}`);\n                return null;\n            }\n            // Transform data to match User interface\n            const user = {\n                id: data.id,\n                username: data.username,\n                email: data.email,\n                firstName: data.first_name,\n                lastName: data.last_name,\n                sponsor: data.sponsor,\n                isVerified: data.is_verified,\n                createdAt: new Date(data.created_at),\n                updatedAt: new Date(data.updated_at)\n            };\n            console.log(`👤 User retrieved for login: ${user.email} (${user.username})`);\n            return user;\n        } catch (error) {\n            console.error(\"❌ Error retrieving user:\", error);\n            return null;\n        }\n    }\n    // Verify user password\n    async verifyPassword(email, password) {\n        try {\n            const { data, error } = await _config_database__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").select(\"password_hash\").or(`email.eq.${email.toLowerCase()},username.eq.${email.toLowerCase()}`).single();\n            if (error || !data) {\n                return false;\n            }\n            const isValid = await bcrypt__WEBPACK_IMPORTED_MODULE_1___default().compare(password, data.password_hash);\n            console.log(`🔐 Password verification for ${email}:`, isValid ? \"SUCCESS\" : \"FAILED\");\n            return isValid;\n        } catch (error) {\n            console.error(\"❌ Error verifying password:\", error);\n            return false;\n        }\n    }\n    generateUserId() {\n        return \"user_\" + crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(16).toString(\"hex\");\n    }\n    generateUsername(email) {\n        const emailPrefix = email.split(\"@\")[0];\n        const randomSuffix = crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(4).toString(\"hex\");\n        return `${emailPrefix}_${randomSuffix}`;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthService.getInstance());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./services/authService.ts\n");

/***/ }),

/***/ "(rsc)/./services/emailService.ts":
/*!**********************************!*\
  !*** ./services/emailService.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nodemailer */ \"(rsc)/./node_modules/nodemailer/lib/nodemailer.js\");\n\nclass EmailService {\n    constructor(){\n        this.transporter = null;\n        this.fromAddress = null;\n        this.initialized = false;\n    // Constructor is empty - initialization happens lazily\n    }\n    static getInstance() {\n        if (!EmailService.instance) {\n            EmailService.instance = new EmailService();\n        }\n        return EmailService.instance;\n    }\n    initialize() {\n        if (this.initialized) return;\n        // Gmail SMTP configuration (for reliable email delivery)\n        const host = process.env.GMAIL_SMTP_HOST || \"smtp.gmail.com\";\n        const port = Number(process.env.GMAIL_SMTP_PORT || 587);\n        const user = process.env.GMAIL_SMTP_USER || \"\";\n        const pass = process.env.GMAIL_SMTP_PASS || \"\";\n        // SES Configuration (commented out until credentials are fixed)\n        // const host = process.env.SES_SMTP_HOST || 'email-smtp.us-east-1.amazonaws.com';\n        // const port = Number(process.env.SES_SMTP_PORT || 587);\n        // const user = process.env.SES_SMTP_USER || '';\n        // const pass = process.env.SES_SMTP_PASS || '';\n        this.fromAddress = process.env.EMAIL_FROM || \"Golden Arrow Capital <goldenarrowcapital2023@gmail.com>\";\n        // Debug logging\n        console.log(\"\\uD83D\\uDD27 EmailService initialization - SMTP Configuration:\");\n        console.log(\"  SMTP_HOST:\", host);\n        console.log(\"  SMTP_PORT:\", port);\n        console.log(\"  SMTP_USER:\", user ? `${user.substring(0, 8)}...` : \"NOT SET\");\n        console.log(\"  SMTP_PASS:\", pass ? `${pass.substring(0, 8)}...` : \"NOT SET\");\n        console.log(\"  EMAIL_FROM:\", this.fromAddress);\n        // Remove development mode restriction - always try to send emails\n        if (!user || !pass) {\n            console.log(\"⚠️  Gmail SMTP credentials not set. Emails will not be sent.\");\n            console.log(\"   Please set GMAIL_SMTP_USER and GMAIL_SMTP_PASS in .env file\");\n            console.log(\"   Instructions:\");\n            console.log(\"   1. Enable 2FA on your Gmail account\");\n            console.log(\"   2. Generate an App Password\");\n            console.log(\"   3. Set GMAIL_SMTP_USER=your-email@gmail.com\");\n            console.log(\"   4. Set GMAIL_SMTP_PASS=your-16-digit-app-password\");\n            this.initialized = true;\n            return;\n        }\n        this.transporter = nodemailer__WEBPACK_IMPORTED_MODULE_0__.createTransport({\n            host,\n            port,\n            secure: false,\n            auth: {\n                user,\n                pass\n            },\n            tls: {\n                rejectUnauthorized: false\n            }\n        });\n        this.initialized = true;\n    }\n    getOTPEmailTemplate(otp, type, firstName) {\n        const name = firstName ? ` ${firstName}` : \"\";\n        const templates = {\n            signup: {\n                subject: \"Verify Your Golden Arrow Capital Account\",\n                html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #0f172a; color: #ffffff;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <div style=\"background: linear-gradient(135deg, #fbbf24, #f59e0b); padding: 20px; border-radius: 10px; display: inline-block;\">\n                <h1 style=\"margin: 0; color: #0f172a; font-size: 24px;\">Golden Arrow Capital</h1>\n              </div>\n            </div>\n            \n            <div style=\"background-color: #1e293b; padding: 30px; border-radius: 10px; border: 1px solid #fbbf24;\">\n              <h2 style=\"color: #fbbf24; margin-top: 0;\">Welcome to Golden Arrow Capital${name}!</h2>\n              \n              <p style=\"color: #cbd5e1; line-height: 1.6;\">\n                Thank you for joining our exclusive investment platform. To complete your account setup and verify your email address, please use the verification code below:\n              </p>\n              \n              <div style=\"text-align: center; margin: 30px 0;\">\n                <div style=\"background: linear-gradient(135deg, #fbbf24, #f59e0b); padding: 20px; border-radius: 10px; display: inline-block; font-size: 32px; font-weight: bold; letter-spacing: 5px; color: #0f172a;\">\n                  ${otp}\n                </div>\n              </div>\n              \n              <p style=\"color: #cbd5e1; line-height: 1.6;\">\n                This verification code will expire in <strong style=\"color: #fbbf24;\">10 minutes</strong>. If you didn't request this verification, please ignore this email.\n              </p>\n              \n              <div style=\"border-top: 1px solid #374151; margin-top: 30px; padding-top: 20px;\">\n                <p style=\"color: #64748b; font-size: 14px; margin: 0;\">\n                  Best regards,<br>\n                  The Golden Arrow Capital Team\n                </p>\n              </div>\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 20px;\">\n              <p style=\"color: #64748b; font-size: 12px;\">\n                © 2025 Golden Arrow Capital. All rights reserved.<br>\n                This is an automated message, please do not reply to this email.\n              </p>\n            </div>\n          </div>\n        `,\n                text: `\nWelcome to Golden Arrow Capital${name}!\n\nThank you for joining our exclusive investment platform. To complete your account setup, please use this verification code:\n\n${otp}\n\nThis code will expire in 10 minutes. If you didn't request this verification, please ignore this email.\n\nBest regards,\nThe Golden Arrow Capital Team\n\n© 2025 Golden Arrow Capital. All rights reserved.\n        `\n            },\n            login: {\n                subject: \"Golden Arrow Capital - Login Verification\",\n                html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #0f172a; color: #ffffff;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <div style=\"background: linear-gradient(135deg, #fbbf24, #f59e0b); padding: 20px; border-radius: 10px; display: inline-block;\">\n                <h1 style=\"margin: 0; color: #0f172a; font-size: 24px;\">Golden Arrow Capital</h1>\n              </div>\n            </div>\n            \n            <div style=\"background-color: #1e293b; padding: 30px; border-radius: 10px; border: 1px solid #fbbf24;\">\n              <h2 style=\"color: #fbbf24; margin-top: 0;\">Secure Login Verification</h2>\n              \n              <p style=\"color: #cbd5e1; line-height: 1.6;\">\n                Hello${name}! A login attempt was made to your Golden Arrow Capital account. For your security, please verify your identity using the code below:\n              </p>\n              \n              <div style=\"text-align: center; margin: 30px 0;\">\n                <div style=\"background: linear-gradient(135deg, #fbbf24, #f59e0b); padding: 20px; border-radius: 10px; display: inline-block; font-size: 32px; font-weight: bold; letter-spacing: 5px; color: #0f172a;\">\n                  ${otp}\n                </div>\n              </div>\n              \n              <p style=\"color: #cbd5e1; line-height: 1.6;\">\n                This verification code will expire in <strong style=\"color: #fbbf24;\">10 minutes</strong>. If you didn't attempt to log in, please secure your account immediately by changing your password.\n              </p>\n              \n              <div style=\"border-top: 1px solid #374151; margin-top: 30px; padding-top: 20px;\">\n                <p style=\"color: #64748b; font-size: 14px; margin: 0;\">\n                  Stay secure,<br>\n                  The Golden Arrow Capital Security Team\n                </p>\n              </div>\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 20px;\">\n              <p style=\"color: #64748b; font-size: 12px;\">\n                © 2025 Golden Arrow Capital. All rights reserved.<br>\n                This is an automated security message, please do not reply to this email.\n              </p>\n            </div>\n          </div>\n        `,\n                text: `\nGolden Arrow Capital - Login Verification\n\nHello${name}! A login attempt was made to your account. For your security, please verify your identity using this code:\n\n${otp}\n\nThis code will expire in 10 minutes. If you didn't attempt to log in, please secure your account immediately.\n\nStay secure,\nThe Golden Arrow Capital Security Team\n\n© 2025 Golden Arrow Capital. All rights reserved.\n        `\n            }\n        };\n        return templates[type];\n    }\n    async sendOTP(request, otp) {\n        try {\n            this.initialize();\n            if (!this.transporter || !this.fromAddress) {\n                console.log(\"⚠️  Email service not properly configured. OTP will not be sent.\");\n                console.log(\"\\uD83D\\uDCE7 [DEV MODE] Simulating email send - OTP:\", otp);\n                console.log(\"\\uD83D\\uDCE7 [DEV MODE] NODE_ENV:\", \"development\");\n                console.log(\"\\uD83D\\uDCE7 [DEV MODE] EMAIL_SEND_STRICT:\", process.env.EMAIL_SEND_STRICT);\n                // In development mode or when EMAIL_SEND_STRICT is false, return true to allow the flow to continue\n                const isDevelopment =  true || 0;\n                const isEmailOptional = process.env.EMAIL_SEND_STRICT === \"false\" || !process.env.EMAIL_SEND_STRICT;\n                return isDevelopment || isEmailOptional;\n            }\n            const template = this.getOTPEmailTemplate(otp, request.type, request.firstName);\n            await this.transporter.sendMail({\n                from: this.fromAddress,\n                to: request.email,\n                subject: template.subject,\n                html: template.html,\n                text: template.text\n            });\n            console.log(`📧 OTP email sent via Gmail SMTP to ${request.email}`);\n            return true;\n        } catch (error) {\n            console.error(\"❌ Failed to send OTP email via Gmail SMTP:\", error);\n            return false;\n        }\n    }\n    async sendWelcomeEmail(user) {\n        try {\n            this.initialize();\n            if (!this.transporter || !this.fromAddress) {\n                throw new Error(\"EmailService not properly initialized\");\n            }\n            const welcomeTemplate = {\n                subject: \"Welcome to Golden Arrow Capital - Your Premium Investment Journey Begins\",\n                html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #0f172a; color: #ffffff;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <div style=\"background: linear-gradient(135deg, #fbbf24, #f59e0b); padding: 20px; border-radius: 10px; display: inline-block;\">\n                <h1 style=\"margin: 0; color: #0f172a; font-size: 24px;\">Golden Arrow Capital</h1>\n              </div>\n            </div>\n            \n            <div style=\"background-color: #1e293b; padding: 30px; border-radius: 10px; border: 1px solid #fbbf24;\">\n              <h2 style=\"color: #fbbf24; margin-top: 0;\">Welcome to Golden Arrow Capital, ${user.firstName}!</h2>\n              \n              <p style=\"color: #cbd5e1; line-height: 1.6;\">\n                Congratulations! Your account has been successfully verified and you're now part of our exclusive investment community.\n              </p>\n              \n              <div style=\"background-color: #374151; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                <h3 style=\"color: #fbbf24; margin-top: 0;\">What's Next?</h3>\n                <ul style=\"color: #cbd5e1; line-height: 1.8;\">\n                  <li>Explore your personalized dashboard</li>\n                  <li>Review available investment plans</li>\n                  <li>Set up your portfolio preferences</li>\n                  <li>Start your wealth building journey</li>\n                </ul>\n              </div>\n              \n              <p style=\"color: #cbd5e1; line-height: 1.6;\">\n                Our team of financial experts is here to guide you towards exceptional returns and secure wealth management.\n              </p>\n              \n              <div style=\"border-top: 1px solid #374151; margin-top: 30px; padding-top: 20px;\">\n                <p style=\"color: #64748b; font-size: 14px; margin: 0;\">\n                  Welcome aboard,<br>\n                  The Golden Arrow Capital Team\n                </p>\n              </div>\n            </div>\n          </div>\n        `,\n                text: `Welcome to Golden Arrow Capital, ${user.firstName}!`\n            };\n            await this.transporter.sendMail({\n                from: this.fromAddress,\n                to: user.email,\n                subject: welcomeTemplate.subject,\n                html: welcomeTemplate.html,\n                text: welcomeTemplate.text\n            });\n            console.log(`📧 Welcome email sent via SES to ${user.email}`);\n            return true;\n        } catch (error) {\n            console.error(\"❌ Failed to send welcome email via SES:\", error);\n            return false;\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmailService.getInstance());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zZXJ2aWNlcy9lbWFpbFNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDcUQ7QUFRckQsTUFBTUM7SUFNSixhQUFzQjthQUpkQyxjQUFrQzthQUNsQ0MsY0FBNkI7YUFDN0JDLGNBQWM7SUFHcEIsdURBQXVEO0lBQ3pEO0lBRUEsT0FBY0MsY0FBNEI7UUFDeEMsSUFBSSxDQUFDSixhQUFhSyxRQUFRLEVBQUU7WUFDMUJMLGFBQWFLLFFBQVEsR0FBRyxJQUFJTDtRQUM5QjtRQUNBLE9BQU9BLGFBQWFLLFFBQVE7SUFDOUI7SUFFUUMsYUFBbUI7UUFDekIsSUFBSSxJQUFJLENBQUNILFdBQVcsRUFBRTtRQUV0Qix5REFBeUQ7UUFDekQsTUFBTUksT0FBT0MsUUFBUUMsR0FBRyxDQUFDQyxlQUFlLElBQUk7UUFDNUMsTUFBTUMsT0FBT0MsT0FBT0osUUFBUUMsR0FBRyxDQUFDSSxlQUFlLElBQUk7UUFDbkQsTUFBTUMsT0FBT04sUUFBUUMsR0FBRyxDQUFDTSxlQUFlLElBQUk7UUFDNUMsTUFBTUMsT0FBT1IsUUFBUUMsR0FBRyxDQUFDUSxlQUFlLElBQUk7UUFFNUMsZ0VBQWdFO1FBQ2hFLGtGQUFrRjtRQUNsRix5REFBeUQ7UUFDekQsZ0RBQWdEO1FBQ2hELGdEQUFnRDtRQUVoRCxJQUFJLENBQUNmLFdBQVcsR0FBR00sUUFBUUMsR0FBRyxDQUFDUyxVQUFVLElBQUk7UUFFN0MsZ0JBQWdCO1FBQ2hCQyxRQUFRQyxHQUFHLENBQUM7UUFDWkQsUUFBUUMsR0FBRyxDQUFDLGdCQUFnQmI7UUFDNUJZLFFBQVFDLEdBQUcsQ0FBQyxnQkFBZ0JUO1FBQzVCUSxRQUFRQyxHQUFHLENBQUMsZ0JBQWdCTixPQUFPLENBQUMsRUFBRUEsS0FBS08sU0FBUyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRztRQUNsRUYsUUFBUUMsR0FBRyxDQUFDLGdCQUFnQkosT0FBTyxDQUFDLEVBQUVBLEtBQUtLLFNBQVMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUc7UUFDbEVGLFFBQVFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDbEIsV0FBVztRQUU3QyxrRUFBa0U7UUFFbEUsSUFBSSxDQUFDWSxRQUFRLENBQUNFLE1BQU07WUFDbEJHLFFBQVFDLEdBQUcsQ0FBQztZQUNaRCxRQUFRQyxHQUFHLENBQUM7WUFDWkQsUUFBUUMsR0FBRyxDQUFDO1lBQ1pELFFBQVFDLEdBQUcsQ0FBQztZQUNaRCxRQUFRQyxHQUFHLENBQUM7WUFDWkQsUUFBUUMsR0FBRyxDQUFDO1lBQ1pELFFBQVFDLEdBQUcsQ0FBQztZQUNaLElBQUksQ0FBQ2pCLFdBQVcsR0FBRztZQUNuQjtRQUNGO1FBRUEsSUFBSSxDQUFDRixXQUFXLEdBQUdGLHVEQUEwQixDQUFDO1lBQzVDUTtZQUNBSTtZQUNBWSxRQUFRO1lBQ1JDLE1BQU07Z0JBQ0pWO2dCQUNBRTtZQUNGO1lBQ0FTLEtBQUs7Z0JBQ0hDLG9CQUFvQjtZQUN0QjtRQUNGO1FBRUEsSUFBSSxDQUFDdkIsV0FBVyxHQUFHO0lBQ3JCO0lBRVF3QixvQkFBb0JDLEdBQVcsRUFBRUMsSUFBd0IsRUFBRUMsU0FBa0IsRUFBaUI7UUFDcEcsTUFBTUMsT0FBT0QsWUFBWSxDQUFDLENBQUMsRUFBRUEsVUFBVSxDQUFDLEdBQUc7UUFFM0MsTUFBTUUsWUFBWTtZQUNoQkMsUUFBUTtnQkFDTkMsU0FBUztnQkFDVEMsTUFBTSxDQUFDOzs7Ozs7Ozs7d0ZBU3lFLEVBQUVKLEtBQUs7Ozs7Ozs7O2tCQVE3RSxFQUFFSCxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQXVCaEIsQ0FBQztnQkFDRFEsTUFBTSxDQUFDOytCQUNnQixFQUFFTCxLQUFLOzs7O0FBSXRDLEVBQUVILElBQUk7Ozs7Ozs7O1FBUUUsQ0FBQztZQUNIO1lBQ0FTLE9BQU87Z0JBQ0xILFNBQVM7Z0JBQ1RDLE1BQU0sQ0FBQzs7Ozs7Ozs7Ozs7O3FCQVlNLEVBQUVKLEtBQUs7Ozs7O2tCQUtWLEVBQUVILElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBdUJoQixDQUFDO2dCQUNEUSxNQUFNLENBQUM7OztLQUdWLEVBQUVMLEtBQUs7O0FBRVosRUFBRUgsSUFBSTs7Ozs7Ozs7UUFRRSxDQUFDO1lBQ0g7UUFDRjtRQUVBLE9BQU9JLFNBQVMsQ0FBQ0gsS0FBSztJQUN4QjtJQUVBLE1BQWFTLFFBQVFDLE9BQXdCLEVBQUVYLEdBQVcsRUFBb0I7UUFDNUUsSUFBSTtZQUNGLElBQUksQ0FBQ3RCLFVBQVU7WUFFZixJQUFJLENBQUMsSUFBSSxDQUFDTCxXQUFXLElBQUksQ0FBQyxJQUFJLENBQUNDLFdBQVcsRUFBRTtnQkFDMUNpQixRQUFRQyxHQUFHLENBQUM7Z0JBQ1pELFFBQVFDLEdBQUcsQ0FBQyx3REFBOENRO2dCQUMxRFQsUUFBUUMsR0FBRyxDQUFDLHFDQXJOcEI7Z0JBc05RRCxRQUFRQyxHQUFHLENBQUMsOENBQW9DWixRQUFRQyxHQUFHLENBQUMrQixpQkFBaUI7Z0JBQzdFLG9HQUFvRztnQkFDcEcsTUFBTUMsZ0JBQWdCakMsS0FBeUIsSUFBaUJBLENBQXlCO2dCQUN6RixNQUFNa0Msa0JBQWtCbEMsUUFBUUMsR0FBRyxDQUFDK0IsaUJBQWlCLEtBQUssV0FBVyxDQUFDaEMsUUFBUUMsR0FBRyxDQUFDK0IsaUJBQWlCO2dCQUNuRyxPQUFPQyxpQkFBaUJDO1lBQzFCO1lBRUEsTUFBTUMsV0FBVyxJQUFJLENBQUNoQixtQkFBbUIsQ0FBQ0MsS0FBS1csUUFBUVYsSUFBSSxFQUFFVSxRQUFRVCxTQUFTO1lBRTlFLE1BQU0sSUFBSSxDQUFDN0IsV0FBVyxDQUFDMkMsUUFBUSxDQUFDO2dCQUM5QkMsTUFBTSxJQUFJLENBQUMzQyxXQUFXO2dCQUN0QjRDLElBQUlQLFFBQVFRLEtBQUs7Z0JBQ2pCYixTQUFTUyxTQUFTVCxPQUFPO2dCQUN6QkMsTUFBTVEsU0FBU1IsSUFBSTtnQkFDbkJDLE1BQU1PLFNBQVNQLElBQUk7WUFDckI7WUFFQWpCLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLG9DQUFvQyxFQUFFbUIsUUFBUVEsS0FBSyxDQUFDLENBQUM7WUFDbEUsT0FBTztRQUNULEVBQUUsT0FBT0MsT0FBTztZQUNkN0IsUUFBUTZCLEtBQUssQ0FBQyw4Q0FBOENBO1lBQzVELE9BQU87UUFDVDtJQUNGO0lBRUEsTUFBYUMsaUJBQWlCbkMsSUFBNEQsRUFBb0I7UUFDNUcsSUFBSTtZQUNGLElBQUksQ0FBQ1IsVUFBVTtZQUVmLElBQUksQ0FBQyxJQUFJLENBQUNMLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQ0MsV0FBVyxFQUFFO2dCQUMxQyxNQUFNLElBQUlnRCxNQUFNO1lBQ2xCO1lBRUEsTUFBTUMsa0JBQWtCO2dCQUN0QmpCLFNBQVM7Z0JBQ1RDLE1BQU0sQ0FBQzs7Ozs7Ozs7OzBGQVMyRSxFQUFFckIsS0FBS2dCLFNBQVMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQTRCbkcsQ0FBQztnQkFDRE0sTUFBTSxDQUFDLGlDQUFpQyxFQUFFdEIsS0FBS2dCLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDN0Q7WUFFQSxNQUFNLElBQUksQ0FBQzdCLFdBQVcsQ0FBQzJDLFFBQVEsQ0FBQztnQkFDOUJDLE1BQU0sSUFBSSxDQUFDM0MsV0FBVztnQkFDdEI0QyxJQUFJaEMsS0FBS2lDLEtBQUs7Z0JBQ2RiLFNBQVNpQixnQkFBZ0JqQixPQUFPO2dCQUNoQ0MsTUFBTWdCLGdCQUFnQmhCLElBQUk7Z0JBQzFCQyxNQUFNZSxnQkFBZ0JmLElBQUk7WUFDNUI7WUFFQWpCLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLGlDQUFpQyxFQUFFTixLQUFLaUMsS0FBSyxDQUFDLENBQUM7WUFDNUQsT0FBTztRQUNULEVBQUUsT0FBT0MsT0FBTztZQUNkN0IsUUFBUTZCLEtBQUssQ0FBQywyQ0FBMkNBO1lBQ3pELE9BQU87UUFDVDtJQUNGO0FBQ0Y7QUFFQSxpRUFBZWhELGFBQWFJLFdBQVcsRUFBRSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29sZGVuLWFycm93LW5leHRqcy8uL3NlcnZpY2VzL2VtYWlsU2VydmljZS50cz9kMGFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVtYWlsT1RQUmVxdWVzdCB9IGZyb20gJy4uL3R5cGVzL3VzZXInO1xuaW1wb3J0IG5vZGVtYWlsZXIsIHsgVHJhbnNwb3J0ZXIgfSBmcm9tICdub2RlbWFpbGVyJztcblxuaW50ZXJmYWNlIEVtYWlsVGVtcGxhdGUge1xuICBzdWJqZWN0OiBzdHJpbmc7XG4gIGh0bWw6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xufVxuXG5jbGFzcyBFbWFpbFNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogRW1haWxTZXJ2aWNlO1xuICBwcml2YXRlIHRyYW5zcG9ydGVyOiBUcmFuc3BvcnRlciB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGZyb21BZGRyZXNzOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gQ29uc3RydWN0b3IgaXMgZW1wdHkgLSBpbml0aWFsaXphdGlvbiBoYXBwZW5zIGxhemlseVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBFbWFpbFNlcnZpY2Uge1xuICAgIGlmICghRW1haWxTZXJ2aWNlLmluc3RhbmNlKSB7XG4gICAgICBFbWFpbFNlcnZpY2UuaW5zdGFuY2UgPSBuZXcgRW1haWxTZXJ2aWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBFbWFpbFNlcnZpY2UuaW5zdGFuY2U7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHJldHVybjtcblxuICAgIC8vIEdtYWlsIFNNVFAgY29uZmlndXJhdGlvbiAoZm9yIHJlbGlhYmxlIGVtYWlsIGRlbGl2ZXJ5KVxuICAgIGNvbnN0IGhvc3QgPSBwcm9jZXNzLmVudi5HTUFJTF9TTVRQX0hPU1QgfHwgJ3NtdHAuZ21haWwuY29tJztcbiAgICBjb25zdCBwb3J0ID0gTnVtYmVyKHByb2Nlc3MuZW52LkdNQUlMX1NNVFBfUE9SVCB8fCA1ODcpO1xuICAgIGNvbnN0IHVzZXIgPSBwcm9jZXNzLmVudi5HTUFJTF9TTVRQX1VTRVIgfHwgJyc7XG4gICAgY29uc3QgcGFzcyA9IHByb2Nlc3MuZW52LkdNQUlMX1NNVFBfUEFTUyB8fCAnJztcblxuICAgIC8vIFNFUyBDb25maWd1cmF0aW9uIChjb21tZW50ZWQgb3V0IHVudGlsIGNyZWRlbnRpYWxzIGFyZSBmaXhlZClcbiAgICAvLyBjb25zdCBob3N0ID0gcHJvY2Vzcy5lbnYuU0VTX1NNVFBfSE9TVCB8fCAnZW1haWwtc210cC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbSc7XG4gICAgLy8gY29uc3QgcG9ydCA9IE51bWJlcihwcm9jZXNzLmVudi5TRVNfU01UUF9QT1JUIHx8IDU4Nyk7XG4gICAgLy8gY29uc3QgdXNlciA9IHByb2Nlc3MuZW52LlNFU19TTVRQX1VTRVIgfHwgJyc7XG4gICAgLy8gY29uc3QgcGFzcyA9IHByb2Nlc3MuZW52LlNFU19TTVRQX1BBU1MgfHwgJyc7XG5cbiAgICB0aGlzLmZyb21BZGRyZXNzID0gcHJvY2Vzcy5lbnYuRU1BSUxfRlJPTSB8fCAnR29sZGVuIEFycm93IENhcGl0YWwgPGdvbGRlbmFycm93Y2FwaXRhbDIwMjNAZ21haWwuY29tPic7XG5cbiAgICAvLyBEZWJ1ZyBsb2dnaW5nXG4gICAgY29uc29sZS5sb2coJ/CflKcgRW1haWxTZXJ2aWNlIGluaXRpYWxpemF0aW9uIC0gU01UUCBDb25maWd1cmF0aW9uOicpO1xuICAgIGNvbnNvbGUubG9nKCcgIFNNVFBfSE9TVDonLCBob3N0KTtcbiAgICBjb25zb2xlLmxvZygnICBTTVRQX1BPUlQ6JywgcG9ydCk7XG4gICAgY29uc29sZS5sb2coJyAgU01UUF9VU0VSOicsIHVzZXIgPyBgJHt1c2VyLnN1YnN0cmluZygwLCA4KX0uLi5gIDogJ05PVCBTRVQnKTtcbiAgICBjb25zb2xlLmxvZygnICBTTVRQX1BBU1M6JywgcGFzcyA/IGAke3Bhc3Muc3Vic3RyaW5nKDAsIDgpfS4uLmAgOiAnTk9UIFNFVCcpO1xuICAgIGNvbnNvbGUubG9nKCcgIEVNQUlMX0ZST006JywgdGhpcy5mcm9tQWRkcmVzcyk7XG5cbiAgICAvLyBSZW1vdmUgZGV2ZWxvcG1lbnQgbW9kZSByZXN0cmljdGlvbiAtIGFsd2F5cyB0cnkgdG8gc2VuZCBlbWFpbHNcblxuICAgIGlmICghdXNlciB8fCAhcGFzcykge1xuICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyAgR21haWwgU01UUCBjcmVkZW50aWFscyBub3Qgc2V0LiBFbWFpbHMgd2lsbCBub3QgYmUgc2VudC4nKTtcbiAgICAgIGNvbnNvbGUubG9nKCcgICBQbGVhc2Ugc2V0IEdNQUlMX1NNVFBfVVNFUiBhbmQgR01BSUxfU01UUF9QQVNTIGluIC5lbnYgZmlsZScpO1xuICAgICAgY29uc29sZS5sb2coJyAgIEluc3RydWN0aW9uczonKTtcbiAgICAgIGNvbnNvbGUubG9nKCcgICAxLiBFbmFibGUgMkZBIG9uIHlvdXIgR21haWwgYWNjb3VudCcpO1xuICAgICAgY29uc29sZS5sb2coJyAgIDIuIEdlbmVyYXRlIGFuIEFwcCBQYXNzd29yZCcpO1xuICAgICAgY29uc29sZS5sb2coJyAgIDMuIFNldCBHTUFJTF9TTVRQX1VTRVI9eW91ci1lbWFpbEBnbWFpbC5jb20nKTtcbiAgICAgIGNvbnNvbGUubG9nKCcgICA0LiBTZXQgR01BSUxfU01UUF9QQVNTPXlvdXItMTYtZGlnaXQtYXBwLXBhc3N3b3JkJyk7XG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICAgICAgaG9zdCxcbiAgICAgIHBvcnQsXG4gICAgICBzZWN1cmU6IGZhbHNlLCAvLyB0cnVlIGZvciA0NjUsIGZhbHNlIGZvciA1ODdcbiAgICAgIGF1dGg6IHtcbiAgICAgICAgdXNlcixcbiAgICAgICAgcGFzcyxcbiAgICAgIH0sXG4gICAgICB0bHM6IHtcbiAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T1RQRW1haWxUZW1wbGF0ZShvdHA6IHN0cmluZywgdHlwZTogJ3NpZ251cCcgfCAnbG9naW4nLCBmaXJzdE5hbWU/OiBzdHJpbmcpOiBFbWFpbFRlbXBsYXRlIHtcbiAgICBjb25zdCBuYW1lID0gZmlyc3ROYW1lID8gYCAke2ZpcnN0TmFtZX1gIDogJyc7XG4gICAgXG4gICAgY29uc3QgdGVtcGxhdGVzID0ge1xuICAgICAgc2lnbnVwOiB7XG4gICAgICAgIHN1YmplY3Q6ICdWZXJpZnkgWW91ciBHb2xkZW4gQXJyb3cgQ2FwaXRhbCBBY2NvdW50JyxcbiAgICAgICAgaHRtbDogYFxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7IG1heC13aWR0aDogNjAwcHg7IG1hcmdpbjogMCBhdXRvOyBwYWRkaW5nOiAyMHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjMGYxNzJhOyBjb2xvcjogI2ZmZmZmZjtcIj5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7IG1hcmdpbi1ib3R0b206IDMwcHg7XCI+XG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjZmJiZjI0LCAjZjU5ZTBiKTsgcGFkZGluZzogMjBweDsgYm9yZGVyLXJhZGl1czogMTBweDsgZGlzcGxheTogaW5saW5lLWJsb2NrO1wiPlxuICAgICAgICAgICAgICAgIDxoMSBzdHlsZT1cIm1hcmdpbjogMDsgY29sb3I6ICMwZjE3MmE7IGZvbnQtc2l6ZTogMjRweDtcIj5Hb2xkZW4gQXJyb3cgQ2FwaXRhbDwvaDE+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyOTNiOyBwYWRkaW5nOiAzMHB4OyBib3JkZXItcmFkaXVzOiAxMHB4OyBib3JkZXI6IDFweCBzb2xpZCAjZmJiZjI0O1wiPlxuICAgICAgICAgICAgICA8aDIgc3R5bGU9XCJjb2xvcjogI2ZiYmYyNDsgbWFyZ2luLXRvcDogMDtcIj5XZWxjb21lIHRvIEdvbGRlbiBBcnJvdyBDYXBpdGFsJHtuYW1lfSE8L2gyPlxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgPHAgc3R5bGU9XCJjb2xvcjogI2NiZDVlMTsgbGluZS1oZWlnaHQ6IDEuNjtcIj5cbiAgICAgICAgICAgICAgICBUaGFuayB5b3UgZm9yIGpvaW5pbmcgb3VyIGV4Y2x1c2l2ZSBpbnZlc3RtZW50IHBsYXRmb3JtLiBUbyBjb21wbGV0ZSB5b3VyIGFjY291bnQgc2V0dXAgYW5kIHZlcmlmeSB5b3VyIGVtYWlsIGFkZHJlc3MsIHBsZWFzZSB1c2UgdGhlIHZlcmlmaWNhdGlvbiBjb2RlIGJlbG93OlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyOyBtYXJnaW46IDMwcHggMDtcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgI2ZiYmYyNCwgI2Y1OWUwYik7IHBhZGRpbmc6IDIwcHg7IGJvcmRlci1yYWRpdXM6IDEwcHg7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgZm9udC1zaXplOiAzMnB4OyBmb250LXdlaWdodDogYm9sZDsgbGV0dGVyLXNwYWNpbmc6IDVweDsgY29sb3I6ICMwZjE3MmE7XCI+XG4gICAgICAgICAgICAgICAgICAke290cH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8cCBzdHlsZT1cImNvbG9yOiAjY2JkNWUxOyBsaW5lLWhlaWdodDogMS42O1wiPlxuICAgICAgICAgICAgICAgIFRoaXMgdmVyaWZpY2F0aW9uIGNvZGUgd2lsbCBleHBpcmUgaW4gPHN0cm9uZyBzdHlsZT1cImNvbG9yOiAjZmJiZjI0O1wiPjEwIG1pbnV0ZXM8L3N0cm9uZz4uIElmIHlvdSBkaWRuJ3QgcmVxdWVzdCB0aGlzIHZlcmlmaWNhdGlvbiwgcGxlYXNlIGlnbm9yZSB0aGlzIGVtYWlsLlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiYm9yZGVyLXRvcDogMXB4IHNvbGlkICMzNzQxNTE7IG1hcmdpbi10b3A6IDMwcHg7IHBhZGRpbmctdG9wOiAyMHB4O1wiPlxuICAgICAgICAgICAgICAgIDxwIHN0eWxlPVwiY29sb3I6ICM2NDc0OGI7IGZvbnQtc2l6ZTogMTRweDsgbWFyZ2luOiAwO1wiPlxuICAgICAgICAgICAgICAgICAgQmVzdCByZWdhcmRzLDxicj5cbiAgICAgICAgICAgICAgICAgIFRoZSBHb2xkZW4gQXJyb3cgQ2FwaXRhbCBUZWFtXG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyOyBtYXJnaW4tdG9wOiAyMHB4O1wiPlxuICAgICAgICAgICAgICA8cCBzdHlsZT1cImNvbG9yOiAjNjQ3NDhiOyBmb250LXNpemU6IDEycHg7XCI+XG4gICAgICAgICAgICAgICAgwqkgMjAyNSBHb2xkZW4gQXJyb3cgQ2FwaXRhbC4gQWxsIHJpZ2h0cyByZXNlcnZlZC48YnI+XG4gICAgICAgICAgICAgICAgVGhpcyBpcyBhbiBhdXRvbWF0ZWQgbWVzc2FnZSwgcGxlYXNlIGRvIG5vdCByZXBseSB0byB0aGlzIGVtYWlsLlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYCxcbiAgICAgICAgdGV4dDogYFxuV2VsY29tZSB0byBHb2xkZW4gQXJyb3cgQ2FwaXRhbCR7bmFtZX0hXG5cblRoYW5rIHlvdSBmb3Igam9pbmluZyBvdXIgZXhjbHVzaXZlIGludmVzdG1lbnQgcGxhdGZvcm0uIFRvIGNvbXBsZXRlIHlvdXIgYWNjb3VudCBzZXR1cCwgcGxlYXNlIHVzZSB0aGlzIHZlcmlmaWNhdGlvbiBjb2RlOlxuXG4ke290cH1cblxuVGhpcyBjb2RlIHdpbGwgZXhwaXJlIGluIDEwIG1pbnV0ZXMuIElmIHlvdSBkaWRuJ3QgcmVxdWVzdCB0aGlzIHZlcmlmaWNhdGlvbiwgcGxlYXNlIGlnbm9yZSB0aGlzIGVtYWlsLlxuXG5CZXN0IHJlZ2FyZHMsXG5UaGUgR29sZGVuIEFycm93IENhcGl0YWwgVGVhbVxuXG7CqSAyMDI1IEdvbGRlbiBBcnJvdyBDYXBpdGFsLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgICAgICBgXG4gICAgICB9LFxuICAgICAgbG9naW46IHtcbiAgICAgICAgc3ViamVjdDogJ0dvbGRlbiBBcnJvdyBDYXBpdGFsIC0gTG9naW4gVmVyaWZpY2F0aW9uJyxcbiAgICAgICAgaHRtbDogYFxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7IG1heC13aWR0aDogNjAwcHg7IG1hcmdpbjogMCBhdXRvOyBwYWRkaW5nOiAyMHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjMGYxNzJhOyBjb2xvcjogI2ZmZmZmZjtcIj5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7IG1hcmdpbi1ib3R0b206IDMwcHg7XCI+XG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjZmJiZjI0LCAjZjU5ZTBiKTsgcGFkZGluZzogMjBweDsgYm9yZGVyLXJhZGl1czogMTBweDsgZGlzcGxheTogaW5saW5lLWJsb2NrO1wiPlxuICAgICAgICAgICAgICAgIDxoMSBzdHlsZT1cIm1hcmdpbjogMDsgY29sb3I6ICMwZjE3MmE7IGZvbnQtc2l6ZTogMjRweDtcIj5Hb2xkZW4gQXJyb3cgQ2FwaXRhbDwvaDE+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyOTNiOyBwYWRkaW5nOiAzMHB4OyBib3JkZXItcmFkaXVzOiAxMHB4OyBib3JkZXI6IDFweCBzb2xpZCAjZmJiZjI0O1wiPlxuICAgICAgICAgICAgICA8aDIgc3R5bGU9XCJjb2xvcjogI2ZiYmYyNDsgbWFyZ2luLXRvcDogMDtcIj5TZWN1cmUgTG9naW4gVmVyaWZpY2F0aW9uPC9oMj5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDxwIHN0eWxlPVwiY29sb3I6ICNjYmQ1ZTE7IGxpbmUtaGVpZ2h0OiAxLjY7XCI+XG4gICAgICAgICAgICAgICAgSGVsbG8ke25hbWV9ISBBIGxvZ2luIGF0dGVtcHQgd2FzIG1hZGUgdG8geW91ciBHb2xkZW4gQXJyb3cgQ2FwaXRhbCBhY2NvdW50LiBGb3IgeW91ciBzZWN1cml0eSwgcGxlYXNlIHZlcmlmeSB5b3VyIGlkZW50aXR5IHVzaW5nIHRoZSBjb2RlIGJlbG93OlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyOyBtYXJnaW46IDMwcHggMDtcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgI2ZiYmYyNCwgI2Y1OWUwYik7IHBhZGRpbmc6IDIwcHg7IGJvcmRlci1yYWRpdXM6IDEwcHg7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgZm9udC1zaXplOiAzMnB4OyBmb250LXdlaWdodDogYm9sZDsgbGV0dGVyLXNwYWNpbmc6IDVweDsgY29sb3I6ICMwZjE3MmE7XCI+XG4gICAgICAgICAgICAgICAgICAke290cH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8cCBzdHlsZT1cImNvbG9yOiAjY2JkNWUxOyBsaW5lLWhlaWdodDogMS42O1wiPlxuICAgICAgICAgICAgICAgIFRoaXMgdmVyaWZpY2F0aW9uIGNvZGUgd2lsbCBleHBpcmUgaW4gPHN0cm9uZyBzdHlsZT1cImNvbG9yOiAjZmJiZjI0O1wiPjEwIG1pbnV0ZXM8L3N0cm9uZz4uIElmIHlvdSBkaWRuJ3QgYXR0ZW1wdCB0byBsb2cgaW4sIHBsZWFzZSBzZWN1cmUgeW91ciBhY2NvdW50IGltbWVkaWF0ZWx5IGJ5IGNoYW5naW5nIHlvdXIgcGFzc3dvcmQuXG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJib3JkZXItdG9wOiAxcHggc29saWQgIzM3NDE1MTsgbWFyZ2luLXRvcDogMzBweDsgcGFkZGluZy10b3A6IDIwcHg7XCI+XG4gICAgICAgICAgICAgICAgPHAgc3R5bGU9XCJjb2xvcjogIzY0NzQ4YjsgZm9udC1zaXplOiAxNHB4OyBtYXJnaW46IDA7XCI+XG4gICAgICAgICAgICAgICAgICBTdGF5IHNlY3VyZSw8YnI+XG4gICAgICAgICAgICAgICAgICBUaGUgR29sZGVuIEFycm93IENhcGl0YWwgU2VjdXJpdHkgVGVhbVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlcjsgbWFyZ2luLXRvcDogMjBweDtcIj5cbiAgICAgICAgICAgICAgPHAgc3R5bGU9XCJjb2xvcjogIzY0NzQ4YjsgZm9udC1zaXplOiAxMnB4O1wiPlxuICAgICAgICAgICAgICAgIMKpIDIwMjUgR29sZGVuIEFycm93IENhcGl0YWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQuPGJyPlxuICAgICAgICAgICAgICAgIFRoaXMgaXMgYW4gYXV0b21hdGVkIHNlY3VyaXR5IG1lc3NhZ2UsIHBsZWFzZSBkbyBub3QgcmVwbHkgdG8gdGhpcyBlbWFpbC5cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIGAsXG4gICAgICAgIHRleHQ6IGBcbkdvbGRlbiBBcnJvdyBDYXBpdGFsIC0gTG9naW4gVmVyaWZpY2F0aW9uXG5cbkhlbGxvJHtuYW1lfSEgQSBsb2dpbiBhdHRlbXB0IHdhcyBtYWRlIHRvIHlvdXIgYWNjb3VudC4gRm9yIHlvdXIgc2VjdXJpdHksIHBsZWFzZSB2ZXJpZnkgeW91ciBpZGVudGl0eSB1c2luZyB0aGlzIGNvZGU6XG5cbiR7b3RwfVxuXG5UaGlzIGNvZGUgd2lsbCBleHBpcmUgaW4gMTAgbWludXRlcy4gSWYgeW91IGRpZG4ndCBhdHRlbXB0IHRvIGxvZyBpbiwgcGxlYXNlIHNlY3VyZSB5b3VyIGFjY291bnQgaW1tZWRpYXRlbHkuXG5cblN0YXkgc2VjdXJlLFxuVGhlIEdvbGRlbiBBcnJvdyBDYXBpdGFsIFNlY3VyaXR5IFRlYW1cblxuwqkgMjAyNSBHb2xkZW4gQXJyb3cgQ2FwaXRhbC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgICAgICAgYFxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGVtcGxhdGVzW3R5cGVdO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNlbmRPVFAocmVxdWVzdDogRW1haWxPVFBSZXF1ZXN0LCBvdHA6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICAgIFxuICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydGVyIHx8ICF0aGlzLmZyb21BZGRyZXNzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfimqDvuI8gIEVtYWlsIHNlcnZpY2Ugbm90IHByb3Blcmx5IGNvbmZpZ3VyZWQuIE9UUCB3aWxsIG5vdCBiZSBzZW50LicpO1xuICAgICAgICBjb25zb2xlLmxvZygn8J+TpyBbREVWIE1PREVdIFNpbXVsYXRpbmcgZW1haWwgc2VuZCAtIE9UUDonLCBvdHApO1xuICAgICAgICBjb25zb2xlLmxvZygn8J+TpyBbREVWIE1PREVdIE5PREVfRU5WOicsIHByb2Nlc3MuZW52Lk5PREVfRU5WKTtcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk6cgW0RFViBNT0RFXSBFTUFJTF9TRU5EX1NUUklDVDonLCBwcm9jZXNzLmVudi5FTUFJTF9TRU5EX1NUUklDVCk7XG4gICAgICAgIC8vIEluIGRldmVsb3BtZW50IG1vZGUgb3Igd2hlbiBFTUFJTF9TRU5EX1NUUklDVCBpcyBmYWxzZSwgcmV0dXJuIHRydWUgdG8gYWxsb3cgdGhlIGZsb3cgdG8gY29udGludWVcbiAgICAgICAgY29uc3QgaXNEZXZlbG9wbWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG4gICAgICAgIGNvbnN0IGlzRW1haWxPcHRpb25hbCA9IHByb2Nlc3MuZW52LkVNQUlMX1NFTkRfU1RSSUNUID09PSAnZmFsc2UnIHx8ICFwcm9jZXNzLmVudi5FTUFJTF9TRU5EX1NUUklDVDtcbiAgICAgICAgcmV0dXJuIGlzRGV2ZWxvcG1lbnQgfHwgaXNFbWFpbE9wdGlvbmFsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuZ2V0T1RQRW1haWxUZW1wbGF0ZShvdHAsIHJlcXVlc3QudHlwZSwgcmVxdWVzdC5maXJzdE5hbWUpO1xuXG4gICAgICBhd2FpdCB0aGlzLnRyYW5zcG9ydGVyLnNlbmRNYWlsKHtcbiAgICAgICAgZnJvbTogdGhpcy5mcm9tQWRkcmVzcyxcbiAgICAgICAgdG86IHJlcXVlc3QuZW1haWwsXG4gICAgICAgIHN1YmplY3Q6IHRlbXBsYXRlLnN1YmplY3QsXG4gICAgICAgIGh0bWw6IHRlbXBsYXRlLmh0bWwsXG4gICAgICAgIHRleHQ6IHRlbXBsYXRlLnRleHQsXG4gICAgICB9KTtcblxuICAgICAgY29uc29sZS5sb2coYPCfk6cgT1RQIGVtYWlsIHNlbnQgdmlhIEdtYWlsIFNNVFAgdG8gJHtyZXF1ZXN0LmVtYWlsfWApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gc2VuZCBPVFAgZW1haWwgdmlhIEdtYWlsIFNNVFA6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZW5kV2VsY29tZUVtYWlsKHVzZXI6IHsgZW1haWw6IHN0cmluZzsgZmlyc3ROYW1lOiBzdHJpbmc7IGxhc3ROYW1lOiBzdHJpbmcgfSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICAgIFxuICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydGVyIHx8ICF0aGlzLmZyb21BZGRyZXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRW1haWxTZXJ2aWNlIG5vdCBwcm9wZXJseSBpbml0aWFsaXplZCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB3ZWxjb21lVGVtcGxhdGUgPSB7XG4gICAgICAgIHN1YmplY3Q6ICdXZWxjb21lIHRvIEdvbGRlbiBBcnJvdyBDYXBpdGFsIC0gWW91ciBQcmVtaXVtIEludmVzdG1lbnQgSm91cm5leSBCZWdpbnMnLFxuICAgICAgICBodG1sOiBgXG4gICAgICAgICAgPGRpdiBzdHlsZT1cImZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjsgbWF4LXdpZHRoOiA2MDBweDsgbWFyZ2luOiAwIGF1dG87IHBhZGRpbmc6IDIwcHg7IGJhY2tncm91bmQtY29sb3I6ICMwZjE3MmE7IGNvbG9yOiAjZmZmZmZmO1wiPlxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlcjsgbWFyZ2luLWJvdHRvbTogMzBweDtcIj5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICNmYmJmMjQsICNmNTllMGIpOyBwYWRkaW5nOiAyMHB4OyBib3JkZXItcmFkaXVzOiAxMHB4OyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XCI+XG4gICAgICAgICAgICAgICAgPGgxIHN0eWxlPVwibWFyZ2luOiAwOyBjb2xvcjogIzBmMTcyYTsgZm9udC1zaXplOiAyNHB4O1wiPkdvbGRlbiBBcnJvdyBDYXBpdGFsPC9oMT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICMxZTI5M2I7IHBhZGRpbmc6IDMwcHg7IGJvcmRlci1yYWRpdXM6IDEwcHg7IGJvcmRlcjogMXB4IHNvbGlkICNmYmJmMjQ7XCI+XG4gICAgICAgICAgICAgIDxoMiBzdHlsZT1cImNvbG9yOiAjZmJiZjI0OyBtYXJnaW4tdG9wOiAwO1wiPldlbGNvbWUgdG8gR29sZGVuIEFycm93IENhcGl0YWwsICR7dXNlci5maXJzdE5hbWV9ITwvaDI+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8cCBzdHlsZT1cImNvbG9yOiAjY2JkNWUxOyBsaW5lLWhlaWdodDogMS42O1wiPlxuICAgICAgICAgICAgICAgIENvbmdyYXR1bGF0aW9ucyEgWW91ciBhY2NvdW50IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSB2ZXJpZmllZCBhbmQgeW91J3JlIG5vdyBwYXJ0IG9mIG91ciBleGNsdXNpdmUgaW52ZXN0bWVudCBjb21tdW5pdHkuXG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjMzc0MTUxOyBwYWRkaW5nOiAyMHB4OyBib3JkZXItcmFkaXVzOiA4cHg7IG1hcmdpbjogMjBweCAwO1wiPlxuICAgICAgICAgICAgICAgIDxoMyBzdHlsZT1cImNvbG9yOiAjZmJiZjI0OyBtYXJnaW4tdG9wOiAwO1wiPldoYXQncyBOZXh0PzwvaDM+XG4gICAgICAgICAgICAgICAgPHVsIHN0eWxlPVwiY29sb3I6ICNjYmQ1ZTE7IGxpbmUtaGVpZ2h0OiAxLjg7XCI+XG4gICAgICAgICAgICAgICAgICA8bGk+RXhwbG9yZSB5b3VyIHBlcnNvbmFsaXplZCBkYXNoYm9hcmQ8L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpPlJldmlldyBhdmFpbGFibGUgaW52ZXN0bWVudCBwbGFuczwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGk+U2V0IHVwIHlvdXIgcG9ydGZvbGlvIHByZWZlcmVuY2VzPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaT5TdGFydCB5b3VyIHdlYWx0aCBidWlsZGluZyBqb3VybmV5PC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDxwIHN0eWxlPVwiY29sb3I6ICNjYmQ1ZTE7IGxpbmUtaGVpZ2h0OiAxLjY7XCI+XG4gICAgICAgICAgICAgICAgT3VyIHRlYW0gb2YgZmluYW5jaWFsIGV4cGVydHMgaXMgaGVyZSB0byBndWlkZSB5b3UgdG93YXJkcyBleGNlcHRpb25hbCByZXR1cm5zIGFuZCBzZWN1cmUgd2VhbHRoIG1hbmFnZW1lbnQuXG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJib3JkZXItdG9wOiAxcHggc29saWQgIzM3NDE1MTsgbWFyZ2luLXRvcDogMzBweDsgcGFkZGluZy10b3A6IDIwcHg7XCI+XG4gICAgICAgICAgICAgICAgPHAgc3R5bGU9XCJjb2xvcjogIzY0NzQ4YjsgZm9udC1zaXplOiAxNHB4OyBtYXJnaW46IDA7XCI+XG4gICAgICAgICAgICAgICAgICBXZWxjb21lIGFib2FyZCw8YnI+XG4gICAgICAgICAgICAgICAgICBUaGUgR29sZGVuIEFycm93IENhcGl0YWwgVGVhbVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYCxcbiAgICAgICAgdGV4dDogYFdlbGNvbWUgdG8gR29sZGVuIEFycm93IENhcGl0YWwsICR7dXNlci5maXJzdE5hbWV9IWBcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IHRoaXMudHJhbnNwb3J0ZXIuc2VuZE1haWwoe1xuICAgICAgICBmcm9tOiB0aGlzLmZyb21BZGRyZXNzLFxuICAgICAgICB0bzogdXNlci5lbWFpbCxcbiAgICAgICAgc3ViamVjdDogd2VsY29tZVRlbXBsYXRlLnN1YmplY3QsXG4gICAgICAgIGh0bWw6IHdlbGNvbWVUZW1wbGF0ZS5odG1sLFxuICAgICAgICB0ZXh0OiB3ZWxjb21lVGVtcGxhdGUudGV4dCxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZyhg8J+TpyBXZWxjb21lIGVtYWlsIHNlbnQgdmlhIFNFUyB0byAke3VzZXIuZW1haWx9YCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzZW5kIHdlbGNvbWUgZW1haWwgdmlhIFNFUzonLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVtYWlsU2VydmljZS5nZXRJbnN0YW5jZSgpOyAiXSwibmFtZXMiOlsibm9kZW1haWxlciIsIkVtYWlsU2VydmljZSIsInRyYW5zcG9ydGVyIiwiZnJvbUFkZHJlc3MiLCJpbml0aWFsaXplZCIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJpbml0aWFsaXplIiwiaG9zdCIsInByb2Nlc3MiLCJlbnYiLCJHTUFJTF9TTVRQX0hPU1QiLCJwb3J0IiwiTnVtYmVyIiwiR01BSUxfU01UUF9QT1JUIiwidXNlciIsIkdNQUlMX1NNVFBfVVNFUiIsInBhc3MiLCJHTUFJTF9TTVRQX1BBU1MiLCJFTUFJTF9GUk9NIiwiY29uc29sZSIsImxvZyIsInN1YnN0cmluZyIsImNyZWF0ZVRyYW5zcG9ydCIsInNlY3VyZSIsImF1dGgiLCJ0bHMiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJnZXRPVFBFbWFpbFRlbXBsYXRlIiwib3RwIiwidHlwZSIsImZpcnN0TmFtZSIsIm5hbWUiLCJ0ZW1wbGF0ZXMiLCJzaWdudXAiLCJzdWJqZWN0IiwiaHRtbCIsInRleHQiLCJsb2dpbiIsInNlbmRPVFAiLCJyZXF1ZXN0IiwiRU1BSUxfU0VORF9TVFJJQ1QiLCJpc0RldmVsb3BtZW50IiwiaXNFbWFpbE9wdGlvbmFsIiwidGVtcGxhdGUiLCJzZW5kTWFpbCIsImZyb20iLCJ0byIsImVtYWlsIiwiZXJyb3IiLCJzZW5kV2VsY29tZUVtYWlsIiwiRXJyb3IiLCJ3ZWxjb21lVGVtcGxhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./services/emailService.ts\n");

/***/ }),

/***/ "(rsc)/./services/otpService.ts":
/*!********************************!*\
  !*** ./services/otpService.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _emailService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emailService */ \"(rsc)/./services/emailService.ts\");\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/database */ \"(rsc)/./config/database.ts\");\n\n\nif (!global.globalOTPStorage) {\n    global.globalOTPStorage = new Map();\n}\nclass OTPService {\n    constructor(){\n        this.OTP_EXPIRY_MINUTES = 10;\n        this.MAX_ATTEMPTS = 3;\n        this.useInMemory = (process.env.OTP_USE_MEMORY ?? \"true\") === \"true\";\n        this.isEmailSendStrict = (process.env.EMAIL_SEND_STRICT ?? \"true\") === \"true\";\n        this.inMemoryOTPs = global.globalOTPStorage;\n        // Clean up expired OTPs every 5 minutes (reduced frequency to avoid timing issues)\n        setInterval(()=>{\n            this.cleanupExpiredOTPs();\n        }, 300000); // 5 minutes instead of 1 minute\n    }\n    static getInstance() {\n        if (!OTPService.instance) {\n            OTPService.instance = new OTPService();\n        }\n        return OTPService.instance;\n    }\n    generateOTP() {\n        // Generate a 6-digit OTP\n        return Math.floor(100000 + Math.random() * 900000).toString();\n    }\n    keyFor(email, type) {\n        return `${email}|${type}`;\n    }\n    async cleanupExpiredOTPs() {\n        try {\n            const now = new Date();\n            if (this.useInMemory) {\n                let deleted = 0;\n                for (const [key, value] of this.inMemoryOTPs.entries()){\n                    if (value.expiresAt < now) {\n                        this.inMemoryOTPs.delete(key);\n                        deleted += 1;\n                    }\n                }\n                if (deleted > 0) {\n                    console.log(`🧹 Cleaned up ${deleted} expired OTPs (memory)`);\n                }\n                return;\n            }\n            const { count } = await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").delete().lt(\"expires_at\", now.toISOString());\n            const deletedCount = count ?? 0;\n            if (deletedCount > 0) {\n                console.log(`🧹 Cleaned up ${deletedCount} expired OTPs`);\n            }\n        } catch (error) {\n            console.error(\"❌ Error cleaning up expired OTPs:\", error);\n        }\n    }\n    async generateAndSendOTP(request) {\n        try {\n            const email = request.email.toLowerCase();\n            if (this.useInMemory) {\n                const key = this.keyFor(email, request.type);\n                const existing = this.inMemoryOTPs.get(key);\n                if (existing && existing.expiresAt > new Date()) {\n                    const remainingTime = Math.ceil((existing.expiresAt.getTime() - Date.now()) / 60000);\n                    return {\n                        success: false,\n                        message: `Please wait ${remainingTime} minutes before requesting a new OTP.`\n                    };\n                }\n                const otp = this.generateOTP();\n                const expiresAt = new Date(Date.now() + this.OTP_EXPIRY_MINUTES * 60000);\n                this.inMemoryOTPs.set(key, {\n                    otp,\n                    expiresAt,\n                    attempts: 0,\n                    isUsed: false,\n                    userData: request.userData\n                });\n                const emailSent = await _emailService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sendOTP(request, otp);\n                if (!emailSent && this.isEmailSendStrict) {\n                    this.inMemoryOTPs.delete(key);\n                    return {\n                        success: false,\n                        message: \"Failed to send OTP email. Please try again.\"\n                    };\n                }\n                console.log(`✅ OTP generated${emailSent ? \" and sent\" : \"\"} to ${email} for ${request.type} (memory)`);\n                return {\n                    success: true,\n                    message: `OTP ${emailSent ? \"sent\" : \"generated\"} successfully to ${email}. Please check your email.`\n                };\n            }\n            // Check if there's already a recent OTP for this email and type (DB)\n            const { data: existingOTPs } = await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").select(\"expires_at\").eq(\"email\", email).eq(\"otp_type\", request.type).gt(\"expires_at\", new Date().toISOString());\n            if (existingOTPs && existingOTPs.length > 0) {\n                const expiresAt = new Date(existingOTPs[0].expires_at);\n                const remainingTime = Math.ceil((expiresAt.getTime() - Date.now()) / 60000);\n                return {\n                    success: false,\n                    message: `Please wait ${remainingTime} minutes before requesting a new OTP.`\n                };\n            }\n            // Generate new OTP\n            const otp = this.generateOTP();\n            const expiresAt = new Date(Date.now() + this.OTP_EXPIRY_MINUTES * 60000);\n            // Store OTP in Supabase - use upsert\n            const { error: upsertError } = await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").upsert({\n                email,\n                otp_code: otp,\n                otp_type: request.type,\n                expires_at: expiresAt.toISOString(),\n                attempts: 0,\n                is_used: false,\n                user_data: request.userData || null\n            }, {\n                onConflict: \"email,otp_type\"\n            });\n            if (upsertError) {\n                console.error(\"❌ Error storing OTP in Supabase:\", upsertError);\n                throw new Error(\"Failed to store OTP\");\n            }\n            // Send OTP via email\n            const emailSent = await _emailService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sendOTP(request, otp);\n            if (!emailSent) {\n                // Always fail if email sending fails\n                await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").delete().eq(\"email\", email).eq(\"otp_type\", request.type);\n                return {\n                    success: false,\n                    message: \"Failed to send OTP email. Please check email configuration and try again.\"\n                };\n            }\n            console.log(`✅ OTP generated${emailSent ? \" and sent\" : \"\"} to ${email} for ${request.type}`);\n            return {\n                success: true,\n                message: `OTP ${emailSent ? \"sent\" : \"generated\"} successfully to ${email}. Please check your email.`\n            };\n        } catch (error) {\n            console.error(\"❌ Error generating/sending OTP:\", error);\n            // Fallback: if DB failed but memory mode is enabled, try memory path\n            if (this.useInMemory) {\n                return {\n                    success: false,\n                    message: \"An error occurred while sending OTP. Please try again.\"\n                };\n            }\n            return {\n                success: false,\n                message: \"An error occurred while sending OTP. Please try again.\"\n            };\n        }\n    }\n    async verifyOTP(otpData) {\n        try {\n            const email = otpData.email.toLowerCase();\n            if (this.useInMemory) {\n                const key = this.keyFor(email, otpData.type);\n                const stored = this.inMemoryOTPs.get(key);\n                if (!stored) {\n                    return {\n                        success: false,\n                        message: \"No OTP found for this email. Please request a new one.\"\n                    };\n                }\n                if (stored.expiresAt < new Date()) {\n                    this.inMemoryOTPs.delete(key);\n                    return {\n                        success: false,\n                        message: \"OTP has expired. Please request a new one.\"\n                    };\n                }\n                if (stored.isUsed) {\n                    return {\n                        success: false,\n                        message: \"This OTP has already been used. Please request a new one.\"\n                    };\n                }\n                if (stored.attempts >= this.MAX_ATTEMPTS) {\n                    this.inMemoryOTPs.delete(key);\n                    return {\n                        success: false,\n                        message: \"Maximum verification attempts exceeded. Please request a new OTP.\"\n                    };\n                }\n                stored.attempts += 1;\n                if (stored.otp !== otpData.otp.trim()) {\n                    const remaining = this.MAX_ATTEMPTS - stored.attempts;\n                    if (remaining > 0) {\n                        return {\n                            success: false,\n                            message: `Invalid OTP. ${remaining} attempts remaining.`\n                        };\n                    } else {\n                        this.inMemoryOTPs.delete(key);\n                        return {\n                            success: false,\n                            message: \"Invalid OTP. Maximum attempts exceeded. Please request a new OTP.\"\n                        };\n                    }\n                }\n                stored.isUsed = true;\n                setTimeout(()=>this.inMemoryOTPs.delete(key), 5000);\n                console.log(`✅ OTP verified successfully for ${email} (${otpData.type}) (memory)`);\n                return {\n                    success: true,\n                    message: \"OTP verified successfully!\"\n                };\n            }\n            // Get OTP from Supabase\n            const { data: otpData_db, error } = await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").select(\"*\").eq(\"email\", email).eq(\"otp_type\", otpData.type).single();\n            // Check if OTP exists\n            if (error || !otpData_db) {\n                return {\n                    success: false,\n                    message: \"No OTP found for this email. Please request a new one.\"\n                };\n            }\n            const storedOTP = otpData_db;\n            const expiresAt = new Date(storedOTP.expires_at);\n            // Check if OTP is expired\n            if (expiresAt < new Date()) {\n                // Delete expired OTP\n                await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").delete().eq(\"email\", email).eq(\"otp_type\", otpData.type);\n                return {\n                    success: false,\n                    message: \"OTP has expired. Please request a new one.\"\n                };\n            }\n            // Check if OTP is already used\n            if (storedOTP.is_used) {\n                return {\n                    success: false,\n                    message: \"This OTP has already been used. Please request a new one.\"\n                };\n            }\n            // Check maximum attempts\n            if (storedOTP.attempts >= this.MAX_ATTEMPTS) {\n                // Delete OTP that exceeded max attempts\n                await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").delete().eq(\"email\", email).eq(\"otp_type\", otpData.type);\n                return {\n                    success: false,\n                    message: \"Maximum verification attempts exceeded. Please request a new OTP.\"\n                };\n            }\n            // Increment attempts\n            const newAttempts = storedOTP.attempts + 1;\n            // Update attempts in Supabase\n            await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").update({\n                attempts: newAttempts\n            }).eq(\"email\", email).eq(\"otp_type\", otpData.type);\n            // Verify OTP\n            if (storedOTP.otp_code !== otpData.otp.trim()) {\n                const remainingAttempts = this.MAX_ATTEMPTS - newAttempts;\n                if (remainingAttempts > 0) {\n                    return {\n                        success: false,\n                        message: `Invalid OTP. ${remainingAttempts} attempts remaining.`\n                    };\n                } else {\n                    // Delete OTP that exceeded max attempts\n                    await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").delete().eq(\"email\", email).eq(\"otp_type\", otpData.type);\n                    return {\n                        success: false,\n                        message: \"Invalid OTP. Maximum attempts exceeded. Please request a new OTP.\"\n                    };\n                }\n            }\n            // Mark OTP as used\n            await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").update({\n                is_used: true\n            }).eq(\"email\", email).eq(\"otp_type\", otpData.type);\n            // Delete used OTP after a short delay to prevent race conditions\n            setTimeout(async ()=>{\n                try {\n                    await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").delete().eq(\"email\", email).eq(\"otp_type\", otpData.type).eq(\"is_used\", true);\n                } catch (error) {\n                    console.error(\"Error deleting used OTP:\", error);\n                }\n            }, 5000);\n            console.log(`✅ OTP verified successfully for ${email} (${otpData.type})`);\n            return {\n                success: true,\n                message: \"OTP verified successfully!\"\n            };\n        } catch (error) {\n            console.error(\"❌ Error verifying OTP:\", error);\n            return {\n                success: false,\n                message: \"An error occurred while verifying OTP. Please try again.\"\n            };\n        }\n    }\n    async resendOTP(email, type, firstName) {\n        try {\n            const normalizedEmail = email.toLowerCase();\n            if (this.useInMemory) {\n                const key = this.keyFor(normalizedEmail, type);\n                this.inMemoryOTPs.delete(key);\n                return this.generateAndSendOTP({\n                    email: normalizedEmail,\n                    type,\n                    firstName\n                });\n            }\n            // Delete any existing OTP for this email and type\n            await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").delete().eq(\"email\", normalizedEmail).eq(\"otp_type\", type);\n            // Generate and send new OTP\n            const result = await this.generateAndSendOTP({\n                email: normalizedEmail,\n                type,\n                firstName\n            });\n            if (result.success) {\n                console.log(`🔄 OTP resent to ${normalizedEmail}`);\n            }\n            return result;\n        } catch (error) {\n            console.error(\"❌ Error resending OTP:\", error);\n            return {\n                success: false,\n                message: \"An error occurred while resending OTP. Please try again.\"\n            };\n        }\n    }\n    // Method to check if OTP exists and is valid (for debugging)\n    async getOTPStatus(email, type) {\n        try {\n            const normalizedEmail = email.toLowerCase();\n            if (this.useInMemory) {\n                const key = this.keyFor(normalizedEmail, type);\n                const stored = this.inMemoryOTPs.get(key);\n                if (!stored) return {\n                    exists: false\n                };\n                return {\n                    exists: true,\n                    expired: stored.expiresAt < new Date(),\n                    attempts: stored.attempts\n                };\n            }\n            const { data, error } = await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").select(\"expires_at, attempts\").eq(\"email\", normalizedEmail).eq(\"otp_type\", type).single();\n            if (error || !data) {\n                return {\n                    exists: false\n                };\n            }\n            return {\n                exists: true,\n                expired: new Date(data.expires_at) < new Date(),\n                attempts: data.attempts\n            };\n        } catch (error) {\n            console.error(\"Error getting OTP status:\", error);\n            return {\n                exists: false\n            };\n        }\n    }\n    // Get stored user data from OTP\n    getUserDataFromOTP(email, type) {\n        if (this.useInMemory) {\n            const key = this.keyFor(email.toLowerCase(), type);\n            const stored = this.inMemoryOTPs.get(key);\n            return stored?.userData || null;\n        }\n        // For database implementation, you'd retrieve from OTP table\n        return null;\n    }\n    // Clear all OTPs (for testing purposes)\n    async clearAllOTPs() {\n        try {\n            if (this.useInMemory) {\n                this.inMemoryOTPs.clear();\n                console.log(\"\\uD83E\\uDDF9 All OTPs cleared (memory)\");\n                return;\n            }\n            await _config_database__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"otps\").delete().neq(\"id\", \"00000000-0000-0000-0000-000000000000\"); // Delete all rows\n            console.log(\"\\uD83E\\uDDF9 All OTPs cleared\");\n        } catch (error) {\n            console.error(\"Error clearing OTPs:\", error);\n        }\n    }\n    // DEVELOPMENT ONLY - Get current OTP for debugging\n    getDebugOTP(email, type) {\n        if (false) {}\n        try {\n            const key = this.keyFor(email.toLowerCase(), type);\n            if (this.useInMemory) {\n                const stored = this.inMemoryOTPs.get(key);\n                return stored || null;\n            }\n            return null;\n        } catch (error) {\n            console.error(\"❌ Error getting debug OTP:\", error);\n            return null;\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OTPService.getInstance());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./services/otpService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/nodemailer","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fverify-login%2Froute&page=%2Fapi%2Fauth%2Fverify-login%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fverify-login%2Froute.ts&appDir=%2FUsers%2Fgauravk%2FDesktop%2FGolden_Arrow%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgauravk%2FDesktop%2FGolden_Arrow&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();